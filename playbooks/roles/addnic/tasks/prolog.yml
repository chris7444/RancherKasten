###
# Copyright (2020) Hewlett Packard Enterprise Development LP
#
# Licensed under the Apache License, Version 2.0 (the "License");
# You may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
### 
---
- name: Verify presence of Bearer token
  stat:
    path: "{{ install_dir }}/rancher-token"
  register: token_file

- fail:
    msg: "Cannot find the file {{ install_dir }}/rancher-token. Did you run 1stlogin.yml ?"
  when: not token_file.stat.exists

- include_vars: "{{ install_dir }}/rancher-token"

- name: Find the user cluster
  uri:
    url: "{{ rancher.url }}/{{ rancher.apiversion }}/clusters?name={{ user_cluster.name }}"
    validate_certs: "{{ rancher.validate_certs }}"
    headers:
      Accept: application/json
      Content-Type: application/json
      Authorization: Bearer {{ bearer_token }}
    method: GET
    timeout: 4
    status_code:
    - 200
    body_format: form-urlencoded
  register: clusters

- name: Fail if cluster was not found
  fail:
    msg: "Cannot find the cluster named {{ user_cluster.name }}"
  when: clusters.json.data | count == 0

- name: Wait until all nodes are deployed (timeout after {{ addnic_wait_for_nodes_ready / 60 }} mns)
  uri:
    url: "{{ rancher.url }}/{{ rancher.apiversion }}/clusters?name={{ user_cluster.name }}"
    validate_certs: "{{ rancher.validate_certs }}"
    headers:
      Accept: application/json
      Content-Type: application/json
      Authorization: Bearer {{ bearer_token }}
    method: GET
    timeout: 4
    status_code:
    - 200
    body_format: form-urlencoded
  register: clusters
  vars:
    target: "{{ clusters.json.data[0].nodeCount }}"
    wanted: "{{ clusters.json.data[0].appliedSpec.rancherKubernetesEngineConfig.nodes | count }}"
  until: target == wanted
  retries: "{{ ( addnic_wait_for_nodes_ready / 5 ) | int }}"
  delay: 5

- name: memorize the list of nodes
  set_fact:
    nodes="{{ clusters.json.data[0].appliedSpec.rancherKubernetesEngineConfig.nodes }}"

- name: Wait a maximum of {{ addnic_wait_for_nodes_ready / 60 }} mns for all nodes to be ready
  uri:
    url: "{{ rancher.url }}/{{ rancher.apiversion }}/nodes/{{ item.nodeId }}"
    validate_certs: "{{ rancher.validate_certs }}"
    headers:
      Accept: application/json
      Content-Type: application/json
      Authorization: Bearer {{ bearer_token }}
    method: GET
    timeout: 4
    status_code:
    - 200
    body_format: form-urlencoded
  vars:
    status: "{{ node_details.json.conditions | json_query(query) | first | default ('gg')  }}"
    query: "[? type == 'Ready'].status"
  register: node_details
  with_items: "{{ nodes }}"
  loop_control:
    label: "{{ item.hostnameOverride }} {{item.nodeId }}"
  until: status | bool
  retries: "{{ ( addnic_wait_for_nodes_ready / 5 ) | int }}"
  delay: 5
